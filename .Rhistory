sidebarPanel(
selectInput("state", "Select State:", choices = state.abb),
numericInput("bedrooms", "Enter Number of Bedrooms:", value = 1, min = 1),
actionButton("updateMap", "Update Map")
),
mainPanel(
leafletOutput("map")
)
)
)
# Define server
server <- function(input, output) {
observeEvent(input$updateMap, {
state_code <- input$state
bedrooms <- sprintf("%02d", input$bedrooms)
start_year <- 2017  # Change as needed
end_year <- 2021   # Change as needed
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%
addPolygons(
data = rent_data,
fillColor = ~colorQuantile("YlOrRd", median_rent)(median_rent),
fillOpacity = 0.7,
color = "#BDBDC3",
weight = 1,
highlight = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(county_name, "<br>", "$", scales::comma(median_rent)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorQuantile("YlOrRd", median_rent),
values = ~median_rent,
title = "Median Rent",
labFormat = labelFormat(prefix = "$"),
opacity = 0.7
)
})
})
}
# Run the app
shinyApp(ui, server)
# Run the app
shinyApp(ui, server)
library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
# Placeholder function to get rent data for a specific state and number of bedrooms
get_rent_data <- function(state, bedrooms) {
# Placeholder: replace this with your actual API call and data conversion
rent_data <- data.frame(
longitude = runif(10, -120, -70),
latitude = runif(10, 25, 50),
rent = rnorm(10, mean = 1500, sd = 500)
)
# Convert to sf format
sf_data <- st_as_sf(rent_data, coords = c("longitude", "latitude"), crs = 4326)
return(sf_data)
}
# Shiny app
ui <- fluidPage(
# UI components
textInput("state_input", "Enter State"),
numericInput("bedrooms_input", "Enter Number of Bedrooms", value = 1, min = 1),
leafletOutput("map")
)
server <- function(input, output, session) {
# Server logic
output$map <- renderLeaflet({
state <- input$state_input
bedrooms <- as.numeric(input$bedrooms_input)
# Get rent data for the specified state and bedrooms
rent_data_sf <- get_rent_data(state, bedrooms)
# Create leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data_sf, fillColor = "blue", fillOpacity = 0.7, stroke = FALSE)
})
}
shinyApp(ui, server)
library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(censusapi)
# Function to get rent data from Census API
get_rent_data <- function(state, bedrooms) {
# Replace "YOUR_API_KEY" with your actual Census API key
api_key <- "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696"
# Census API call for median rent data
rent_data <- getCensus(
name = "acs/acs5",
vintage = 2019,
key = api_key,
region = "state:"   # Change to "county:*" if you want county-level data
) %>%
filter(
NAME == state,
starts_with("B25031_")  # Adjust column prefix based on the Census variables for rent
) %>%
gather(key = "bedrooms", value = "median_rent", -GEOID, -NAME) %>%
mutate(
bedrooms = str_extract(bedrooms, "\\d+"),
median_rent = as.numeric(median_rent)
)
return(rent_data)
}
# Shiny app
ui <- fluidPage(
# UI components
textInput("state_input", "Enter State Abbreviation (e.g., NY)"),
numericInput("bedrooms_input", "Enter Number of Bedrooms", value = 1, min = 1),
leafletOutput("map")
)
server <- function(input, output, session) {
# Server logic
output$map <- renderLeaflet({
state <- input$state_input
bedrooms <- as.numeric(input$bedrooms_input)
# Get rent data for the specified state and bedrooms
rent_data <- get_rent_data(state, bedrooms)
# Create leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillColor = "blue", fillOpacity = 0.7, stroke = FALSE)
})
}
shinyApp(ui, server)
library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(censusapi)
# Function to get rent data from Census API
get_rent_data <- function(state, bedrooms) {
# Replace "YOUR_API_KEY" with your actual Census API key
api_key <- "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696"
# Specify the variables you want to fetch for rent data
vars <- c(paste0("B25031_", sprintf("%03dE", bedrooms)))
# Census API call for median rent data
rent_data <- getCensus(
name = "acs/acs5",
vintage = 2019,
key = api_key,
vars = vars,
region = "state:"   # Change to "county:*" if you want county-level data
) %>%
filter(
NAME == state
) %>%
gather(key = "bedrooms", value = "median_rent", -GEOID, -NAME) %>%
mutate(
bedrooms = str_extract(bedrooms, "\\d+"),
median_rent = as.numeric(median_rent)
)
return(rent_data)
}
# Shiny app
ui <- fluidPage(
# UI components
textInput("state_input", "Enter State Abbreviation (e.g., NY)"),
numericInput("bedrooms_input", "Enter Number of Bedrooms", value = 1, min = 1),
leafletOutput("map")
)
server <- function(input, output, session) {
# Server logic
output$map <- renderLeaflet({
state <- input$state_input
bedrooms <- as.numeric(input$bedrooms_input)
# Get rent data for the specified state and bedrooms
rent_data <- get_rent_data(state, bedrooms)
# Create leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillColor = "blue", fillOpacity = 0.7, stroke = FALSE)
})
}
shinyApp(ui, server)
View(rent_data)
library(shiny)
library(tidycensus)
library(dplyr)
library(sf)
library(leaflet)
# Set your Census API key
Sys.setenv(TIDYCENSUS_KEY = "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696")
get_rent_data <- function(state_code, bedrooms, start_year, end_year) {
variable <- paste0("B25031_00", bedrooms, "E")
rent_data <- purrr::map_df(
seq(start_year, end_year),
~tidycensus::get_acs(
geography = "county",
variables = c(median_rent = variable),
state = state_code,
year = .x,
survey = "acs5",
cache = TRUE
)
)
return(rent_data)
}
# Define UI
ui <- fluidPage(
titlePanel("Rent Data Visualization"),
sidebarLayout(
sidebarPanel(
textInput("state", "Enter State Code (e.g., NY):", value = "NY"),
numericInput("bedrooms", "Enter Number of Bedrooms:", value = 3),
sliderInput("start_year", "Select Start Year:", min = 2010, max = 2020, value = 2017),
sliderInput("end_year", "Select End Year:", min = 2010, max = 2020, value = 2021),
actionButton("update", "Update Map")
),
mainPanel(
leafletOutput("map")
)
)
)
# Define UI
ui <- fluidPage(
titlePanel("Rent Data Visualization"),
sidebarLayout(
sidebarPanel(
textInput("state", "Enter State Code (e.g., NY):", value = "NY"),
numericInput("bedrooms", "Enter Number of Bedrooms:", value = 3),
sliderInput("start_year", "Select Start Year:", min = 2010, max = 2021, value = 2017),
sliderInput("end_year", "Select End Year:", min = 2010, max = 2021, value = 2021),
actionButton("update", "Update Map")
),
mainPanel(
leafletOutput("map")
)
)
)
# Define server
server <- function(input, output) {
observeEvent(input$update, {
state_code <- toupper(input$state)
bedrooms <- input$bedrooms
start_year <- input$start_year
end_year <- input$end_year
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = rent_data,
fillColor = "red",
fillOpacity = 0.6,
weight = 2,
color = "white",
popup = ~paste("County: ", NAME, "<br>Median Rent: $", median_rent)
)
})
})
}
# Run the application
shinyApp(ui, server)
# Define server
# Define server
server <- function(input, output) {
observeEvent(input$update, {
state_code <- toupper(input$state)
bedrooms <- input$bedrooms
start_year <- input$start_year
end_year <- input$end_year
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
# Convert tbl_df to sf
rent_sf <- st_as_sf(rent_data, coords = c("INTPTLAT", "INTPTLON"), crs = 4326)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = rent_sf,
fillColor = "red",
fillOpacity = 0.6,
weight = 2,
color = "white",
popup = ~paste("County: ", NAME, "<br>Median Rent: $", median_rent)
)
})
})
}
# Run the application
shinyApp(ui, server)
# Define server
# Define server
server <- function(input, output) {
observeEvent(input$update, {
state_code <- toupper(input$state)
bedrooms <- input$bedrooms
start_year <- input$start_year
end_year <- input$end_year
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
# Convert tbl_df to sf
rent_sf <- st_sf(rent_data, geom = st_geometry(map))
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = rent_sf,
fillColor = "red",
fillOpacity = 0.6,
weight = 2,
color = "white",
popup = ~paste("County: ", NAME, "<br>Median Rent: $", median_rent)
)
})
})
}
# Run the application
shinyApp(ui, server)
# Set your Census API key
Sys.setenv(TIDYCENSUS_KEY = "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696")
get_rent_data <- function(state_code, bedrooms, start_year, end_year) {
variable <- paste0("B25031_00", bedrooms, "E")
rent_data <- purrr::map_df(
seq(start_year, end_year),
~tidycensus::get_acs(
geography = "county",
variables = c(median_rent = variable),
state = state_code,
year = .x,
survey = "acs5",
geometry = TRUE,  # Fetch geographic boundaries
cache = TRUE
)
)
return(rent_data)
}
# Specify the state, number of bedrooms, and years
state_code <- "VA"  # Replace with the actual state code, e.g., "NY" for New York
bedrooms <- "3" # Replace with the desired number of bedrooms (e.g., "04" for 4 bedrooms)
start_year <- 2017
end_year <- 2021
# Get rent data
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
# Print the data
print(paste("Rent Data for", state_code, bedrooms, "bedrooms from", start_year, "to", end_year, "ACS"))
# Shiny app
ui <- fluidPage(
titlePanel("Rent Data Visualization"),
sidebarLayout(
sidebarPanel(
textInput("stateInput", "Enter State Code (e.g., VA):"),
textInput("bedroomsInput", "Enter Number of Bedrooms (e.g., 3):"),
actionButton("plotButton", "Plot Map")
),
mainPanel(
leafletOutput("rentMap")
)
)
)
server <- function(input, output) {
observeEvent(input$plotButton, {
state_code <- toupper(input$stateInput)
bedrooms <- input$bedroomsInput
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$rentMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillOpacity = 0.5, weight = 1, color = "white",
fillColor = ~colorQuantile("YlOrRd", median_rent)(median_rent),
popup = ~paste("County: ", NAME, "<br>Median Rent: $", median_rent))
})
})
}
shinyApp(ui, server)
server <- function(input, output) {
observeEvent(input$plotButton, {
state_code <- toupper(input$stateInput)
bedrooms <- input$bedroomsInput
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$rentMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillOpacity = 0.5, weight = 1, color = "white",
fillColor = ~colorQuantile("YlOrRd", estimate)(estimate),
popup = ~paste("County: ", NAME, "<br>Median Rent: $", estimate))
})
})
}
shinyApp(ui, server)
server <- function(input, output) {
observeEvent(input$plotButton, {
state_code <- toupper(input$stateInput)
bedrooms <- input$bedroomsInput
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$rentMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillOpacity = 0.5, weight = 1, color = "purple",
fillColor = ~colorQuantile("YlOrRd", estimate)(estimate),
popup = ~paste("County: ", NAME, "<br>Median Rent: $", estimate))
})
})
}
shinyApp(ui, server)
runApp('Main.R')
runApp('Main.R')
runApp('Main.R')
runApp('Main.R')
runApp('Main.R')
runApp('Main.R')
runApp('Main.R')
library(tidycensus)
library(dplyr)
library(leaflet)
library(shiny)
# Set your Census API key
Sys.setenv(TIDYCENSUS_KEY = "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696")
get_rent_data <- function(state_code, bedrooms, start_year, end_year) {
variable <- paste0("B25031_00", bedrooms, "E")
rent_data <- purrr::map_df(
seq(start_year, end_year),
~tidycensus::get_acs(
geography = "county",
variables = c(median_rent = variable),
state = state_code,
year = .x,
survey = "acs5",
geometry = TRUE,  # Fetch geographic boundaries
cache = TRUE
)
)
return(rent_data)
}
# Specify the state, number of bedrooms, and years
state_code <- "VA"  # Replace with the actual state code, e.g., "NY" for New York
bedrooms <- "3" # Replace with the desired number of bedrooms (e.g., "04" for 4 bedrooms)
start_year <- 2017
end_year <- 2021
# Get rent data
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
# Print the data
print(paste("Rent Data for", state_code, bedrooms, "bedrooms from", start_year, "to", end_year, "ACS"))
print(head(rent_data))
# Shiny app
ui <- fluidPage(
titlePanel("Rent Data Visualization"),
sidebarLayout(
sidebarPanel(
textInput("stateInput", "Enter State Code (e.g., VA):"),
textInput("bedroomsInput", "Enter Number of Bedrooms (e.g., 3):"),
actionButton("plotButton", "Plot Map")
),
mainPanel(
leafletOutput("rentMap")
)
)
)
server <- function(input, output) {
observeEvent(input$plotButton, {
state_code <- toupper(input$stateInput)
bedrooms <- input$bedroomsInput
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
output$rentMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = rent_data, fillOpacity = 0.5, weight = 1, color = "white",
fillColor = ~colorQuantile("Blues", estimate)(estimate),
popup = ~paste("County: ", NAME, "<br>Median Rent: $", estimate))
})
})
}
shinyApp(ui, server)
library(shiny); runApp('sample.R')
library(shiny); runApp('Main.R')
library(tidycensus)
library(dplyr)
library(leaflet)
library(shiny)
# Set your Census API key
Sys.setenv(TIDYCENSUS_KEY = "81e3f1bd27a2f4ceca9e26cbb3e9cfe21eaf9696")
get_rent_data <- function(state_code, bedrooms, start_year, end_year) {
variable <- paste0("B25031_00", bedrooms, "E")
rent_data <- purrr::map_df(
seq(start_year, end_year),
~tidycensus::get_acs(
geography = "county",
variables = c(median_rent = variable),
state = state_code,
year = .x,
survey = "acs5",
geometry = TRUE,  # Fetch geographic boundaries
cache = TRUE
)
)
return(rent_data)
}
# Specify the state, number of bedrooms, and years
state_code <- "VA"  # Replace with the actual state code, e.g., "NY" for New York
bedrooms <- "3" # Replace with the desired number of bedrooms (e.g., "04" for 4 bedrooms)
start_year <- 2017
end_year <- 2021
# Get rent data
rent_data <- get_rent_data(state_code, bedrooms, start_year, end_year)
View(rent_data)
runApp('Main.R')
